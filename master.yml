---
# tasks file for k8s_master
- name: "Installing Docker"
  command: yum install docker -y

- name: "Starting and Enabling Docker Services"
  shell: systemctl enable docker --now

- name: "Configuring K8s Repo"
  yum_repository:
       name: Kubernetes
       description: Repo for Configuring Kubernetes
       baseurl: https://packages.cloud.google.com/yum/repos/kubernetes-el7-\$basearch
       enabled: yes
       gpgcheck: yes
       repo_gpgcheck: yes
       gpgkey: https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg

- name: "Installing kubelet kubectl kubeadm iproute-tc Package"
  shell: yum install kubeadm kubelet kubectl iproute-tc -y

- name: "Starting and Enabling Kubernetes Services"
  shell: systemctl enable kubelet --now

- name: "Pulling the Config Images using kubeadm"
  shell: kubeadm config images pull

- name: "Configuring the Docker daemon.json file"
  copy:
    dest: /etc/docker/daemon.json
    content: |
       {
           "exec-opts": ["native.cgroupdriver=systemd"]
       }

- name: "Restarting Docker Service"
  service:
      name: docker
      state: restarted

- name: "Configuring the IP Tables"
  copy:
    dest: /etc/sysctl.d/k8s.conf
    content: |
       net.bridge.bridge-nf-call-ip6tables = 1
       net.bridge.bridge-nf-call-iptables = 1

- name: "Initializing the Cluster"
  shell: kubeadm init --pod-network-cidr=10.244.0.0/16 --ignore-preflight-errors=NumCPU --ignore-preflight-errors=Mem

- name: "Doing the Required Things"
  shell: |
      mkdir -p $HOME/.kube
      cp -i /etc/kubernetes/admin.conf  $HOME/.kube/config
      chown $(id -u):$(id -g) $HOME/.kube/config
  ignore_errors: yes

- name: "Creating Overlay Network using Flannel CNI"
  shell: kubectl apply  -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml

- name: "Generating token"
  shell: kubeadm token create  --print-join-command
  register: token

- name: "Printing Token"
  debug:
     msg: "{{ token.stdout }}"

- name: "Adding Host for Token"
  add_host:
     name: "token"
     token_k8s: "{{ token.stdout }}"
